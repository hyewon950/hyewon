<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.3.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.3.xsd">
	
	<!-- Root Context: defines shared resources visible to all other web components -->
		
		<!-- destroy-method="close"은 끝날때 닫는다 -->
	<!-- class들에 있는 내용은 실제 존재하는 클래스  -->
	<!-- 서비스에 있는 DB연동하는 소스 -->
	<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
		<property name="driverClassName" value="oracle.jdbc.driver.OracleDriver"></property>
		<property name="url" value="jdbc:oracle:thin:@localhost:1521:xe"></property>
		<property name="username" value="greencamp"></property>
		<property name="password" value="greencamp"></property>
	</bean>


	<bean id="sqlSession" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="configLocation" value="classpath:mybatis-config.xml" />
		<property name="dataSource" ref="dataSource" />
	</bean>
	
	<bean id="sqlSessionTemplate" class="org.mybatis.spring.SqlSessionTemplate">
		<constructor-arg ref="sqlSession" />
	</bean>
	
	<!-- AOP XML 방식 -->
	<!-- <bean id="log" class="com.kh.spring.common.LogAdvice"></bean>

<aop:config>
	<aop:pointcut expression="execution(* com.kh.spring..*Impl.*(..))" id="allPointcut"/>
	반환값 int값만 나온다.
	<aop:pointcut expression="execution(int com.kh.spring..*Impl.*(..))" id="returnIntPointcut"/>
	
	aspect:Advice와 pointcut를 합친것 
	<aop:aspect ref="log"> ref=Advice아이디
		pointcut-ref="pointcut아이디" , method=Advice아이디에 있는 class위치에 있는 메소드명
		before : 메소드가 실행되기 전에 실행된다.
		<aop:before method="printLog" pointcut-ref="allPointcut"/> 
		<aop:before method="printTransactionLog" pointcut-ref="returnIntPointcut"/>
		<aop:around method="aroundLog" pointcut-ref="allPointcut"/>
	</aop:aspect>
</aop:config> -->


	<!-- <bean id="log1" class="com.kh.spring.common.Log4jAdvice"></bean>

	 <aop:config>
        시작부분 지정 (impl로 끝나는 모든 메소드)
        <aop:pointcut expression="execution(* com.kh.spring..*Impl.*(..))" id="allPointcut"/>
        <aop:aspect ref="log1">
            
            <aop:before method="pringLogging" pointcut-ref="allPointcut"/>
            <aop:after method="pringLogging" pointcut-ref="allPointcut"/>
        </aop:aspect>
    </aop:config> -->

    
<!-- Spring AOP는 클라이언트가 가지고 있는 관심에 해당하는 비즈니스 메소드를 호출할 때, 횡단 관심에 해당하는 메소드를 적절하게 실행 -->

<!-- 
	맨앞에 *은 반환형을 의미한다.(int,double,*(전부)등을 쓸 수 있다.)
	 1. * org.kh.member.model.service.*.*(..) : service패키지에 있는 모든 클래스 및 모든 메소드 (매개변수는 0개 이상)
	 
	 2. * org.kh.member.model.service..*.*(..) : service패키지 및 하위 패키지에 있는 모든 클래스 및 모든 메소드 (매개변수는 0개 이상)
	 
	 3. * org.kh.member.model.service..*.*() : service패키지 및 하위 패키지에 있는 모든 클래스 및 모든 메소드 (매개변수 없음)
	 
	 4. * org.kh.member.model.service..*.*(*) : service패키지 및 하위 패키지에 있는 모든 클래스 및 모든 메소드 (매개변수 1개)
	 
	 5. * org.kh.member.model.service..*.*(Integer, ..) : service패키지 및 하위 패키지에 있는 모든 클래스 및 모든 메소드 
	 														(매개변수 1개 이상이고 첫번째 파라미터는 정수)
	 														
	 6. int org.kh.member.model.service..*.*(Integer, ..) : service패키지 및 하위 패키지에 있는 모든 클래스 및 모든 메소드 
	 														(매개변수 1개 이상이고 첫번째 파라미터는 정수, 리턴타입은 int)
	 
	 7. int com.kh.spring..*Impl.*(..) : spring패키지 및 하위 패키지에 Impl로 끝나는 클래스의 모든 메소드(매개변수는 0개 이상, 리턴타입은 상관없음)
	 
 -->
 
 	<!-- 추가 - json 만들어조는 부분 -->

	<bean class="org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter">
		<property name="messageConverters">
			<list>
				<!-- JSON 변환 지원 -->
				<bean class="org.springframework.http.converter.json.GsonHttpMessageConverter"/>
			</list>
		</property>
	</bean>
 	
 
 
 
 
	
	<!-- 파일 업로드 관련 Bean등록 : pom.xml에 라이브러리 추가필요-->
	<!--  MultipartResolver 등록 -->
	<bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
		 <property name="maxUploadSize" value="100000000" />
		 <property name="maxInMemorySize" value="100000000" />
	</bean>
	
	<!-- 
		1. maxUploadSize : 한 요청당 업로드가 허용되는 최대용량을 바이트 단위로 설정,
							-1은 제한이 없다는 뜻이고 프로퍼티를 지정하지 않을 때 기본값
		2. maxInMemorySize : 디스크에 저장하지 않고 메모리에 유지하도록 허용하는 바이트 단위 최대용량을 설정
		
		사이즈가 이보다 클 경우 이 사이즈 이상의 데이터는 파일에 저장 
		기본값은 10240바이트
	 -->
	
	
	
	
	<!-- 트랜잭션 처리를 위한 트랜잭션 매니저 추가
		- 트랜잭션은 DB관련 설정이므로 root-context.xml에 이어 작성
	 -->
	 <!-- 
	 		트랜잭션 처리 (commit/rollback)
	 		1.JDBC : Connection 객체 (conn)
	 		2. Mybatis : SqlSession객체
	 		3. Spring : TransactionManager객체
	  -->
	  <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource"/>	
	</bean>

	<!-- namespace에서 tx추가 후 어노테이션을 사용하기 위해 추가 -->
	<!-- 어노테이션으로 하면 이것만 필요 -->
	  <tx:annotation-driven/>
	
	<!-- Transaction 추가 -->
	<!-- <tx:attribute>의 자식 엘리먼트로 <tx:method>를 사용하는데 
		이것을 이용하여 트랜잭션을 적용할 메소드를 지정할 수 있음
		1. read-only : 읽기 전용으로 처리, 트랜잭션 관리 대상에서 제외
		2. name : 메소드 이름
		3. no-rollback-for : 트랜잭션을 롤백하지 않을 예외 지정
		4. rollback-for : 트랜잭션을 롤백할 예외 지정
	 -->
		<!-- <tx:advice id="txAdvice" transaction-manager="transactionManager">
			<tx:attributes>
			select* :select로 시작하는 모든것
				<tx:method name="select*" read-only="true" />
				<tx:method name="insert*" rollback-for="Exception"/>
				<tx:method name="update*" rollback-for="Exception"/>
				<tx:method name="delete*" rollback-for="Exception"/>
			</tx:attributes>
		</tx:advice> -->
		
		<!-- 트랜잭션을 위한 AOP 추가 -->
	<!-- <aop:config proxy-target-class="true">
		<aop:pointcut expression="execution(* com.kh.spring..*Impl.*(..))" id="serviceMethod"/>
		<aop:advisor id="transactionAdvisor" pointcut-ref="serviceMethod" advice-ref="txAdvice"/>
	</aop:config> -->
	
	
	<!-- 이메일 인증  -->
	<!-- Gmail -->
  <bean id="GmailSender" class="org.springframework.mail.javamail.JavaMailSenderImpl">
    <property name="host" value="smtp.gmail.com" />
    <property name="port" value="587" />
    <property name="username" value="honguser9@gmail.com" />
    <property name="password" value="xptmxmrPwjd" />
    <property name="javaMailProperties">
    <props>
      <prop key="mail.smtp.auth">true</prop>
      <prop key="mail.smtp.starttls.enable">true</prop>
    </props>
    

    
    </property>
  </bean>
	





	
</beans>
