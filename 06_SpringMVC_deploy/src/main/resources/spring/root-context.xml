<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.3.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.3.xsd">
	
	<!-- Root Context: defines shared resources visible to all other web components -->
	<!-- 1. DataSource 등록
		- DataSource는 서버 구동시 도시에 연결이 되어야 하며
		연결 정보 설정시 root-context 제일 위쪽에 작성 -->
	<bean id="dataSource"
			class="org.apache.commons.dbcp.BasicDataSource" 
			destroy-method="close">
		<property name="driverClassName" 
			value="oracle.jdbc.driver.OracleDriver" />
		<property name="url"
			value="jdbc:oracle:thin:@localhost:1521:xe" />
		<property name="username" value="spring" />
		<property name="password" value="spring" />
	</bean>
	
	<bean id="sqlSession"
		class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="configLocation"
			value="classpath:mybatis-config.xml" />
		<property name="dataSource" ref="dataSource" />	
	</bean>
	
	<bean id="sqlSessionTemplate"
		class="org.mybatis.spring.SqlSessionTemplate">
		<constructor-arg ref="sqlSession" />
	</bean>
	
	<!--트랜잭션 처리를 위한 트랜잭션 매니저 추가 트랜잭션은 db관련 설정이므로 root-context.xml에 이어 작성  -->
	<!--트랜잭션 처리(commit/rollback)
		1.jdbc:Connection 객체(conn)
		2.Mybatis:SqlSession 객체
		3.Spring:TransactionManager 객체
	
	xml과 annotation방식이있당 ~
	  -->
 	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
			<property name="dataSource" ref="dataSource"/>	
		</bean>
		
	<!-- 	namespace에서 tx추가 후 어노테이션을 사용하기 위해 추가  -->
	<tx:annotation-driven/>
 
			
			<!-- Transaction 추가 -->
		<!-- 
			<tx:attributes>의 자식 엘리먼트로 <tx:method>를 사용하는데 
			이것을 이용하여 트랜잭션을 적용할 메소드를 지정할 수 있음.
			1. read-only : 읽기 전용으로 처리, 트랜잭션 관리 대상에서 제외
			2. name : 메소드 이름
			3. no-rollback-for :트랜잭션을 롤백하지 않을 예외 지정
			4. rollback-for : 트랜잭션을 롤백할 예외 지정	
		-->
		<tx:advice id="txAdvice" transaction-manager="transactionManager">
			<tx:attributes>
				<tx:method name="select*" read-only="true"/>
				<tx:method name="insert*" rollback-for="Exception"/>
				<tx:method name="update*" rollback-for="Exception"/>
				<tx:method name="delete*" rollback-for="Exception"/>
			</tx:attributes>
		</tx:advice>
	
		<!-- 트랜잭션을 위한 AOP 추가 -->
	<aop:config proxy-target-class="true">
		<aop:pointcut expression="execution(* com.kh.spring..*Impl.*(..))" 
					id="serviceMethod"/>
		<aop:advisor id="transactionAdvisor" pointcut-ref="serviceMethod" 
					advice-ref="txAdvice"/>
	</aop:config>
 
	
	
	<!-- AOP XML 방식 -->
<!-- <bean id="log" class="com.kh.spring.common.LogAdvice"></bean> -->
<!-- <bean id="log" class="com.kh.spring.common.Log4jAdvice"></bean> -->
<!-- 
<aop:config>
	<aop:pointcut expression="execution(* com.kh.spring..*Impl.*(..))" id="allPointcut"/> imp로끝나는 모든 메소드
	<aop:pointcut expression="execution(int com.kh.spring..*Impl.*(..))" id="returnIntPointcut"/>
	<aop:aspect ref="log">
		
		<aop:around method="aroundLog" pointcut-ref="allPointcut"/>
		<aop:before method="printLog" pointcut-ref="allPointcut"/>
		<aop:after method="printTransactionLog" pointcut-ref="returnIntPointcut"/>
		<aop:after method="printLogging" pointcut-ref="allPointcut"/>
	</aop:aspect>
</aop:config> -->

	
	<!-- Spring AOP는 클라이언트가 가지고 있는 관심에 해당하는
	비즈니스 메소드를 호출할 때, 횡단 관심에 해당하는 메소드를 적절하게 실행 -->
		<!-- 
		리터타입, 패키지, 클래스, 메소드, 매개변수
	1. * org.kh.member.model.service.*.*(..) :  service패키지에 있는 모든 클래스 및 모든 메소드 (매개변수는 0개 이상)
	2. * org.kh.member.model.service..*.*(..) : service패키지 및 하위 패키지에 있는 모든 클래스 및 모든 메소드 (매개변수는 0개 이상)
	3. * org.kh.member.model.service..*.*() : service패키지 및 하위 패키지에 있는 모든 클래스 및 모든 메소드 (매개변수 없음)
	4. * org.kh.member.model.service..*.*(*) : service패키지 및 하위 패키지에 있는 모든 클래스 및 모든 메소드 (매개변수 1개)
	5. * org.kh.member.model.service..*.*(Integer,..) :service패키지 및 하위 패키지에 있는 모든 클래스 및 모든 메소드 
	(매개변수 1개 이상이고 첫번째 파라미터는 정수)
	6. int org.kh.member.model.service..*.*(Integer,..) :service패키지 및 하위 패키지에 있는 모든 클래스 및 모든 메소드
	(매개변수 1개 이상이고 첫번째 파라미터는 정수, 리턴타입은 int)
	7. int com.kh.spring..*Impl.*(..) : spring패키지 및 하위 패키지에 Impl로 끝나는 클래스의 모든 메소드(매개변수 0개이상)
 -->
 
 
	<!--파일 업로드 관련 bean등록  -->
	<!--multipartresolver  -->
	<bean id="multipartResolver" 
		class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
	<property name="maxUploadSize" value="100000000"></property>
	<property name="maxInMemorySize" value="10000000"></property>

	</bean>
	<!--
	1.maxUploadSize:한 요청당 업로드가 허용되는 최대용량을 바이트 단위로 설정 -1은 제한이 없다는 뜻이고
	프로퍼티를 지정하지 않을 때 기본값
	2.maxInMemorySize :디스크에 저장하지 않고 메모리에 유지하도록 허용하는 바이트 단위 최대용량을 설정
	
	사이즈가 이보다 클 경우 이사이즈 이상의 데이터는 파일에 저장
	기본값은 10240 바이트
	  -->
	
</beans>
